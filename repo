#!/usr/bin/env ruby
require 'thor'
require 'git_wrapper'

GitWrapper.logger.level = Logger::ERROR

class Result < Struct.new(:ok, :error, :pending)
end

class Repo < Thor

  desc 'pull', 'Pull all repositories from gems and applications'
  method_option :server, aliases: '-s', desc: 'Git origin server'

  def pull
    puts "Pulling repositories"

    result = Result.new 0, 0, 0

    repositories(options[:server]).each do |r|
      name = "#{File.basename(r.location)} (#{r.current_branch}) "
      print "  #{name.ljust(50, '-')}> "

      if r.status.any?
        puts "Pending commit"
        result.pending += 1
      elsif r.pull 'origin', r.current_branch
        puts 'Pulled OK'
        result.ok += 1
      else
        puts "Error: (#{r.log_output.last}#{r.log_error.last})"
        result.error += 1
      end
    end

    puts "\nSummary: #{result.ok} pulled, #{result.pending} pending, #{result.error} errors"
  end

  desc 'push', 'Push all repositories from gems and applications'
  method_option :server, aliases: '-s', desc: 'Git origin server'

  def push
    puts "Pushing repositories"

    result = Result.new 0, 0, 0

    repositories(options[:server]).each do |r|
      name = "#{File.basename(r.location)} (#{r.current_branch}) "
      print "  #{name.ljust(50, '-')}> "

      if r.status.any?
        puts "Pending commit"
        result.pending += 1
      elsif r.push 'origin', r.current_branch
        puts 'Pushed OK'
        result.ok += 1
      else
        puts "Error: (#{r.log_output.last}#{r.log_error.last})"
        result.error += 1
      end
    end

    puts "\nSummary: #{result.ok} pushed, #{result.pending} pending, #{result.error} errors"
  end

  desc 'pending', 'List repositories with pending commits'
  method_option :server, aliases: '-s', desc: 'Git origin server'

  def pending
    puts "Pending changes"

    count = 0
    repositories(options[:server]).each do |r|
      if r.status.any?
        puts "  #{r.location} (#{r.status.count})"
        count += 1
      end
    end

    puts "\nSummary: #{count} repositories have changes"
  end

  desc 'gems', 'List gems projects'
  method_option :server, aliases: '-s', desc: 'Git origin server'

  def gems
    puts 'Listing gems'

    repositories(options[:server]).map { |r| Dir.glob("#{r.location}/*.gemspec") }.flatten.each do |file|
      Dir.chdir File.dirname(file)
      gemspec = Gem::Specification.load(file)
      print "  #{gemspec.name} ".ljust(30, '-')
      print '-> '
      print "v#{gemspec.version}".ljust(10, ' ')
      print ' | '
      puts gemspec.description
    end
  end

  desc 'list', 'List all repositories'
  method_option :server, aliases: '-s', desc: 'Git origin server'

  def list
    repositories(options[:server]).each do |r|
      puts r.location
    end
  end

  private

  def repositories(server=nil)
    gems_path = File.expand_path('../../gems', __FILE__)
    app_path = File.expand_path('../../applications', __FILE__)
    scripts_path = File.expand_path('../../scripts', __FILE__)

    sources = []
    sources += Dir.glob("#{gems_path}/**/*.gemspec").map { |f| File.dirname(f) }
    sources += Dir.entries(app_path).map { |d| File.join(app_path, d) }
    sources << scripts_path

    sources.map { |path| GitWrapper::Repository.new(path) }.select do |r|
      r.initialized? && (server.nil? || r.config('remote.origin.url').match(%r(.+@#{server}:.+)))
    end.sort_by(&:location)
  end

end

Repo.start